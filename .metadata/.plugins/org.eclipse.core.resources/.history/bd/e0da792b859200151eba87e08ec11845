package com.cnkvha.uuol.sjl;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.Arrays;
import java.util.zip.Deflater;
import java.util.zip.Inflater;

public final class SerializationTool {
	
	public static Object decode(byte[] data, int buffSize) throws Exception{
		//Decompress
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		byte[] buff = new byte[buffSize];
		Inflater inf = new Inflater();
		inf.setInput(data, 4, data.length - 4);
		while(!inf.finished()){
			int read = inf.inflate(buff);
			bos.write(buff, 0, read);
		}
		inf.end();
		
		//Decode
		ObjectInputStream obj = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));
		Object target = obj.readObject();
		obj.close();
		return target;
	}
	
	public static byte[] encode(Serializable msg, int bufferSize) throws IOException {
		//Encode
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		ObjectOutputStream oup = new ObjectOutputStream(bos);
		oup.writeObject(msg);
		oup.flush();
		byte[] data = bos.toByteArray();
		oup.close();
		bos.close();
		//Compress
		Deflater def = new Deflater(4);
		def.setInput(data);
		byte[] buff = new byte[4 + bufferSize];
		def.finish();
		int size = def.deflate(buff, 3, buff.length - 4);
		def.end();
		buff[0] = (byte)((size >> 24) & 0xFF);
		buff[1] = (byte)((size >> 16) & 0xFF);
		buff[2] = (byte)((size >> 8) & 0xFF);
		buff[3] = (byte)(size & 0xFF);
		buff = Arrays.copyOfRange(buff, 4, size + 4);
		return buff;
	}
	
	public static byte[] encode(Serializable msg) throws IOException {
		return encode(msg, 32768);
	}
}
