package com.cnkvha.uuol.cache.server.handlers.request.general;

import java.sql.Blob;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.UUID;

import com.cnkvha.uuol.cache.protocol.UUOLComponent;
import com.cnkvha.uuol.cache.protocol.data.planet.ChunkData;
import com.cnkvha.uuol.cache.protocol.handlers.RequestHandler;
import com.cnkvha.uuol.cache.protocol.message.general.request.CacheRequestLoadChunk;
import com.cnkvha.uuol.cache.protocol.message.general.response.CacheResponseLoadChunk;
import com.cnkvha.uuol.cache.server.CacheServer;
import com.cnkvha.uuol.cache.server.cache.planet.PlanetChunkCache;
import com.cnkvha.uuol.sjl.ConnectionPool;
import com.cnkvha.uuol.sjl.SerializationTool;
import com.cnkvha.uuol.sjl.math.Vector3Long;

public class RequestHandlerLoadChunk extends
		RequestHandler<CacheRequestLoadChunk, CacheResponseLoadChunk> {

	public final static RequestHandlerLoadChunk STATIC_INSTANCE = new RequestHandlerLoadChunk();
	
	 /* [CHUNK LOAD PROCESS]
	 * 1. REMOVED!! - Disable AUTO_COMMIT
	 * 2. DO: SELECT `SerializedData` FROM `chunks` WHERE ... [(REMOVED)FOR UPDATE]
	 * 3. Not null, already generated and continue steps. Else, go to step [6]
	 * 4. Check that cluster is online or not, if not, update to ourself and load the data. 
	 * 5. Do 'COMMIT' and exit process
	 * 6. Return NOT_FOUND state
	 */
	

	@Override
	public CacheResponseLoadChunk handle(CacheRequestLoadChunk req) {
		CacheResponseLoadChunk response = new CacheResponseLoadChunk();
		response.reqid = req.reqid;
		
		final String thisServer = CacheServer.getInstance().getGms().getInstanceName();
		final UUID cPlanet = req.planet;
		final Vector3Long cPos = req.chunkLocation;
		
		//Detect if already loaded
		{
			PlanetChunkCache planet = CacheServer.getInstance().getCache().getPlanet(cPlanet);
			if(planet != null){
				if(planet.isChunkCached(cPos)){
					response.reqid = req.reqid;
					response.status = CacheResponseLoadChunk.STATUS_ALREADY_LOADED;
					return response;
				}
			}
		}
		
		CacheServer.getInstance().getLogger().info("==> Continuing process... ");

		Connection conn = ConnectionPool.getConnection();
		if (conn == null) {
			response.status = CacheResponseLoadChunk.FAILD_LOAD;
			return response;
		}
		
		//[STEP 1]
		//REMOVED

		CacheServer.getInstance().getThreadPool().execute(new Runnable() {
			@Override
			public void run() {
				Statement stm = null;
				try {
					stm = conn.createStatement();
					//[STEP 2]
					{
						ResultSet rs = stm.executeQuery("SELECT `SerializedData`,`CacheServer` FROM `chunks` WHERE " +
										"(`PlanetID_Most`,`PlanetID_Least`)=(" + cPlanet.getMostSignificantBits() + "," + cPlanet.getLeastSignificantBits() + ") AND " + 
										"(`ChunkX`,`ChunkY`,`ChunkZ`)=" + String.format("(%s,%s,%s)", cPos.x, cPos.y, cPos.z)
										//+ " LOCK IN SHARE MODE" //Locks its ass
									);
						/**
						 * 0=cached
						 * 1=need cache
						 * 2=not exist
						 */
						int stat = -1;
						ChunkData chunk = null;
						String clusterInRecord = null;
						if(rs.next()){
							//We got the thing, check wether a cluster already cached it. 
							clusterInRecord = rs.getString("CacheServer");
							if(clusterInRecord.equals("") || clusterInRecord.trim().equals("") || !CacheServer.getInstance().getClientHandler().getCurrentClusters().contains(clusterInRecord)){
								//target is fucking down, dude
								//we re-cache it
								stat = 1;
								//read the shit
								Blob blob = rs.getBlob("SerializedData");
								byte[] bin = blob.getBytes(1, (int) blob.length());
								chunk = (ChunkData) SerializationTool.decode(bin, 1024000);
								//We will be putting in the cache later
							}else{
								stat = 0;
							}
						}else{
							//Cool, this is a non-exist chunk.
							stat = 2;
						}
						rs.close();
						//Process the status number
						if(stat == 0){
							//[STEP 4] - Already loaded by other people
							CacheServer.getInstance().getLogger().info("==> " + cPos.toString() + " is loaded by other people!? ");
							response.status = CacheResponseLoadChunk.LOADED_BY_OTHER;
							CacheServer.getInstance().broadcastPacket(response, UUOLComponent.GENERAL);
							return;
						}
						if(stat == 1){
							//[STEP 4] - Not loaded
							stm.executeUpdate("UPDATE `chunks` SET `CacheServer`='" + thisServer + "' WHERE (`PlanetID_Most`,`PlanetID_Least`)="
							+ String.format("(%s,%s)", cPlanet.getMostSignificantBits(), cPlanet.getLeastSignificantBits()) + " AND "
							+ "(`ChunkX`,`ChunkY`,`ChunkZ`)=" + String.format("(%s,%s,%s)", cPos.x, cPos.y, cPos.z) + " AND "
							+ "`CacheServer`='" + (clusterInRecord != null ? clusterInRecord : "") + "'");
							
							//Cache it
							PlanetChunkCache planet = CacheServer.getInstance().getCache().initialPlanetCache(cPlanet, null);
							planet.cacheChunk(cPos, chunk);
							
							response.status = CacheResponseLoadChunk.STATUS_LOADED;
							CacheServer.getInstance().broadcastPacket(response, UUOLComponent.GENERAL);
							return;
						}
						if(stat == 2){
							//[STEP 6]
							response.status = CacheResponseLoadChunk.NOT_EXIST;
							CacheServer.getInstance().broadcastPacket(response, UUOLComponent.GENERAL);
							return;
						}
					}
				} catch (Exception e) {
					CacheServer
							.getInstance()
							.getLogger()
							.error("Error loading chunk "
									+ req.chunkLocation.toString()
									+ ", message: " + e.getMessage());
					e.printStackTrace();
					response.status = CacheResponseLoadChunk.FAILD_LOAD;
					CacheServer.getInstance().broadcastPacket(response,
							UUOLComponent.GENERAL);
				} finally {
					try {
						if (stm != null && !stm.isClosed()) {
							stm.close();
						}
					} catch (Exception e) {}
					if (conn != null) {
						try {
							conn.close();
						} catch (Exception e) {}
					}
				}
			}
		});
		return null; // Return later
	}

}
